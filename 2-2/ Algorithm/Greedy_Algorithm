
다익스트라 알고리즘은

최단경로 탐색 알고리즘으로

여기서 최단경로 알고리즘이란?
가장 짧은 경로를 찾는 알고리즘을 말한다.

인공위성 gps 소프트웨어 등에서 사용한다

각 지점은 그래프에서 노드로 표현하고, 지점간 연결된 도로는 그래프에서 간선으로 표현한다.

방향성은 있을수도 있고 없을수도 있다.

이때 음의간선은 포함시킬 수 없다.

현실세계에서는 음의 간선이 없다.

여기서 음의간선이란?

가중치가 음수인 간선을 뜻한다.

그러면 최단경로 알고리즘 중에서 대표적인 다익스트라 최단 경로 알고리즘을
알아보도록 하겠습니다.

다익스트라 알고리즘은 다이나믹 프로그래밍이다.

왜냐? 다익스트라에서 최단 거리는 여러개의 최단 거리로 이루어져 있기 때문이다.

다이나믹 프로그래밍은?
작은 문제가 큰 문제속에 비슷하게 포함되어있는 것을 말한다.

그래서 다익스트라 알고리즘은 다이나믹 프로그래밍이다.

다익스트라 알고리즘은 최단거리를 구할 때 그 이전까지의 최단거리를 모두 구한다는 특징이 있다.

다익스트라 알고리즘은 정렬을 사용해서 정렬 이후에 가장 작은 값을 포함시키는 방식으로 동작하기 때문에 
greedy 알고리즘이라고 할 수 있다.

현재 보고있는 노드에 당장 붙어있는 노드들과의 거리를 확인한다.

그 다음에는 현재 갈 수 있는 노드들 중에서 가장 짧은 노드에서 다시 확인한다.

이번에 확인할 때는 만약 이전에 확인한 노드와 같은 노드가 새로 기준으로 하는 노드와 인접해 있다면 
처음 노드에서 이전에 확인한 노드와 같은 그 노드로 가는 최단거리를 구한다.
만약 해당노드로 가려고 할 따 간선을 2개 지나가야 하면 그 2개 간선의 합이 총 길이가 된다.


다익스트라라는 것은 현재까지의 최단거리를 갱신하는 알고리즘이다.


1. 출발점 정의(출발노드 설정)

2. 출발점을 기준으로 각 노드의 최소비용을 저장한다. (최단 거리 테이블 초기화)

3. 방문하지 않은 노드 중에서 가장 가까운 간선의 노드를 거쳐서 특정한 노드로 가는 경우를 고려해서
최소 비용을 갱신한다. (최단거리 테이블 갱신)

4. 3번 과정을 반복한다.


   1  --(2)-- 2
  ㅣ  \
  (1)  (5)
  ㅣ      \
   4--(3)--3

()안에 있는 숫자는 해당 간선의 비용을 말한다.

이런식으로 두었을 때 처음에 1번 노드에서 시작한다고 하면

1에서 갈 수 있는 노드들 즉 2 3 4까지의 최소비용을 저장한다. 각각 2 5 3이다.

이렇게 하면 1번에서 다른 노드들 까지의 최소비용을 담은 배열을 갱신하게 된다.


현재 갱신된 상태는

1   2   3   4
0   2   5   1

이 상태이다.

원래는 1을 제외하고는 모두 무한의 값이 들어갔다. 
1    2    3    4
0  무한  무한  무한
이유는 얼마나 걸릴지 모르기 때문에
어떤 길이 나와도 해당 길이 최소라고 인식하고 넣기 위해서 무한이라는 값을 사용했다.

그 후에 갱신된 테이블 중에서 가장 비용이 적은 노드인 4번을 선택한다.

   1  --(2)-- 2
  ㅣ  \
  (1)  (5)
  ㅣ      \
   4--(3)--3

4번 노드는 1, 2, 3이 연결되어 있다.

그러나 1은 이미 검사를 마친 내륙노드라고 인식한다.

그래서 1을 제외하고  2, 3까지의 비용만 확인한다.

현재 1 에서 4로가는 비용은 1이다.

그러니까 어디를 가든지 1이라는 비용은 기본적으로 포함시켜서 확인해야 한다.

그러면 4번에서 3번을 가는 비용은? 1 + 3 이기 때문에 4이다.

그러나 원래 1에서 3으로 가는 비용은 5였기 때문에 

원래의 최소비용을 담은 배열을 갱신해주어야 한다.

1   2   3   4
0   2   5   1
현재 이 상황에서

1   2   3   4
0   2   4   1

이렇게 갱신된다.

이런식으로 특정한 노드를 거쳐서 가는것이 더 싼 경우 값을 갱신해준다.

이것이 다익스트라 알고리즘의 기본 원리이다.


   1  --(2)-- 2
  ㅣ  \
  (1)  (5)
  ㅣ      \
   4--(3)--3

이제 현재 알고있는 비용 중에서 그 다음으로 작은 노드인 2번 노드로 가서 확인한다.

2번 노드는 1하고만연결되어있어서 확인 할 것이 더 이상 없다.

그러면 그 다음으로 비용이 적은 노드를 확인한다.

여기서는 3이다.

하지만 3에서 확인하였을 때도 이미 1 2 4가 모두 내륙이기 때문에 더 이상 확인할 것이 없다..

이런식으로 이미 확인을 마친 노드들은 내륙노드로 판단하여 추후에 다른노드들에서 해당 노드로 가는 것은 더 이상
확인하지 않는다.

이런식으로 매번 현재 상황에서 가장 비용이 적은 노드를 선택하기 때문에

그리디 알고리즘으로 분류할 수 있다.

최종적인 최소비용테이블은




  1  --(2)-- 2
  ㅣ  \
  (1)  (5)
  ㅣ      \
   4--(3)--3

1   2   3   4
0   2   4   1 이렇게 된다.

코드로 구현할 때는

해당 노드에서 다른노드로 가는 비용을 담아두는 배열을 만들어 두어야 한다.

그리고 어떤 노드가 내륙 즉 이미 방문한 노드인지 bool값 배열을 만들어주면된다.

그리고 다익스트라 함수는 매개변수로 시작노드를 받아오도록 만들어 준다.

함수 내부구현은

현재까지 알고있던 비용 + 현재 보고있는 노드에서 해당 노드로 가는 비용 < 기존에 알고있던 비용

이 조건을 만족한다면 최종적으로 해당 노드로 가는 최소비용을 담고있는 배열을 갱신해주면 된다.

아주 잊이~ 하다고 볼 수 있다.

해당 알고리즘을 구현할 때 더욱 효과적으로 하는 방법이 있다.

바로 힙 자료구조를 사용하는 방법이다.

hip자료구조를 사용하게 된다면

데이터를 넣거나 꺼낼 때 최소힙구조를 만들기 때문에

시간복잡도가 O(logn) 만큼의 시간복잡도가 걸린다.

이렇게 사용하면 정렬을 하지 않기 때문에 최악의 경우에도 nlog을 보장하기 때문에
좀 더 효과적이라고 할 수 있다.

heapq를 사용하면 위에 말한 해당 과정으로 수행할 수 있다.

우리는 가장 짧은 거리를 뽑아내야하기 때문에 최소 힙을 사용하는 heapq가 적합하다고 볼 수 있다.


다익스트라 말고도 최단경로를 계산하는 알고리즘이 있다.

바로 플로이드 워셜 알고리즘이다.

간단하게 보자면 플로이드 워셜 알고리즘은 다익스트라 알고리즘과 마찬가지로
단계별로 거쳐가는 노드를 기준으로 알고리즘을 수행한다.

모든 노드에서 다른 모든 노드까지의 최단 경로를 모두 계산한다.

다익스트라 알고리즘과 다른 점은, 매 단계마다 방문하지 않은 노드 중에 최단거리를 갖는 노드를 찾는 과정이
필요하지 않다.

플로이드 워셜은 2차원 테이블에 최단 거리 정보를 저장한다.

플로이드 워셜 알고리즘은 다이나믹 프로그래밍 유형에 속한다.

플로이드 워셜 알고리즘은 실제로 점화식에 따라서 갱신한다.

점화식에 맞게 3차 반복문을 이용해서 2차원 테이블을 갱신해준다.

구현난이도가 다익스트라보다 낮다.

하지만 모든 노드에서 다른 모든 노드까지의 최단거리를 구하는 과정에서

시간복잡도는 O(n^3)이다.

노드가 적을 때 효과적이고 많으면 다익스트라를 사용하는 것이 더 좋다.

각 단계마다 특정한 노드 k를 거쳐가는 경우가 있는 지 확인한다.

a에서 b로가는 최단거리보다 a에서 k를 거쳐 b로 가는 거리가 더 짧은지 검사한다.

간단히 말해서 min(A->B 비용, A->K->B 비용) 이렇게 더 작은 값을 뽑아낸다.

각 노드가 다른 노드로 가는 비용을 기록할 수 있도록 한다.

플로이드 워셜 알고리즘은 노드의 개수가 N개일 때 n번의 단계를 수행하고

각 노드를 거쳐가는 경우를 확인한다.
즉 N^2의 연산을 통해 현재 노드를 거쳐가는 모든 경로를 고려한다.

즉 O(n^3) 시간복잡도이기 때문에 느리지만 모든 노드에서 다른 모든 노드로까지의 최단거리를 계산해준다.

그래서 노드의 개수가 500 이하인 경우에만 사용하고

이상인 경우에는 다익스트라 알고리즘을 사용하는 것이 더 좋다.


knapsack problem


knapsack problem이 무엇인가??
예를들어 어떤 공간에 최대 15만큼의 짐을 넣을 수 있을 때 다양한 무게와 가치를 가진 짐들이 있을 때
가장 최고의 가치로 넣을 수 있는 조합을 찾는 것이다.

배낭문제도 중복된 문제가 많이 발생하는 다이나믹 프로그래밍이다.

문제를 나눌 때 배낭안에 있거나 없거나를 생각해주어야 한다.

내 생각에 약간 이진트리 구조로 점점 늘어나면서 내려가는 것 같다.

처음에 (가방안에 넣을 수 있는 물건,남은 가방의 용량)
가방("A,B,C,D",5) 이런식으로 있다고 했을 때

가치와, 무게는 각각
{A : 30, A : 1}, {B : 30, B : 2}, {C : 40 , C : 3}, {D : 10, D : 4}
일 때

가방내부(들어갈 수 있는 물건 : 남은 무게 : 총 가치)

이렇게 되어 있을 때 ()는 넣은 것 {}는 안넣을 것 이라고 가정했을 때

                                             가방(A,B,C,D : 5 : 0)
                                             /                   \
                     가방(A,B,C,(D) : 1 : 10)                  가방(A,B,C,{D} : 5 : 0)
                        /              \                            /              \
가방(A,B,(C),(D) : -2 : 50)  가방(A,B,{C},{D} : 1 : 10) 가방(A,B,(C),(D) : 2 : 40) 가방(A,B,{C},{D} : 5 : 0)

이런식으로 계속 타고 들어간다. 가방의 남은 무게가 -가 되면 당연히 해당 라인은 그 자리에서 끝이다.

점화식으로 나타내면

max NS(n-1,w-w[n]) + vla[n]
max NS(n-1,w) + 0 
이다.

이것도 2차원 배열로 나타낼 수 있다.

         0    1    2    3    4    5
   *     0    0    0    0    0    0  
   A     0   30   30   30   30   30
A,B      0   30   30   50   50   50
A,B,C    0   30   30   50   70   70
A,B,C,D  0   30   30   50   70   70

이런식으로 하는 것이다. 해당 표에서 최종 value 70을 구할 수 있다.


위 방식과는 조금 다른 분수배낭문제가 있다.

위 방식은 담거나 안담거나 둘 중 하나만 가능하지만

분수배낭문제는 단위무게당 이윤이 가장 큰 물건을 다 채우고, 
그 다음 단위무게당 이윤이 큰 물건을 채우고
이걸 반복하면서 더 이상 하나의 물건을 더 못채울 때 까지 반복한다.

마지막에 남은 자투리 공간에 다음으로 단위무게당 이윤이 큰 물건을 남아있는 배낭의 비율만큼
나누어서 넣는 것이다.

시간복잡도는 O(nlogn) 이다.

처음에 정렬하는데에 들어가는 시간복잡도만 필요하다.

그냥 정렬시간복잡도이다.
이거는 정렬 알고리즘을 무엇을 선택하는지에 따라서 시간복잡도가 달라질 것 같다.
















