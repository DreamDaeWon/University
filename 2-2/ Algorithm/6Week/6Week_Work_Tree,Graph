Tree/Graph 기초

tree
루트가 있고 아래로 차일드 노드들이 있고 노드를 연결하는 선 -> 엣지가 있다.

엣지의 방향은 위에서 아래로
들어오는 곳은 하나 나가는 곳은 여러곳
만약 트리가 엣지의 방향을 위아래로 조정할 수도있고 옆의 노드와 서로 주고받고
또는 엣지가 돌아서 다시 자기자신을 가리키기도 하고 등등
노드들끼리 다양한 상호작용을 할 수 있는 것 그것이 그래프이다.

그럼 트리는 뭐다? 방향이 있는 그래프이다.

여기서 그래프는 뭘까
Graph
그래프는 Vertex(Node)와 Edgi 엣지로 이루어져 있다.
엣지는 노드들 이어준다.
응용할 때는 노드들을 도시 엣지를 길 이런식으로 바꾸어 원하는 것을 구현한다.


Directed Graph -> 방향이 있는 그래프이다 이런경우에는 방향을 화살표로 나타내 주어야 한다

? 그러나 트리는 방향을 화살표로 나타내주지 않는다. 왜그럴까?
그 이유는 트리는 항상 아래 방향으로 가기 때문에 굳이 해주지 않는것이다. 

Undirected Graph - > 방향이 없는 그래프이다. 이런 경우에는 방향을 화살표로 나타내지 않고 그냥 노드끼리 직선으로 연결한다.

Cyclic Graph-> 하나 이상의 사이클이 존재하는 그래프를 말한다.
여기서 사이클이란 노드들이 뺑뺑이 도는 구조가 있는 것을 말한다.

Acyclic Graph -> 사이클이 없는 그래프를 뜻한다.


그래프를 표현하는 방법에는 두 가지가 있다.

Adjacency Matrix-> 그래프를 이차원 배열로 표현하는 것을 말한다.

  1
/ ㅣ \
2 ㅣ  3         이런식으로 연결되어 있을 때
  ㅣ /          2차원 배열로 표시하면
  4              
                1  2  3  4
              1 0  1  1  1
              2 1  0  0  0
              3 1  0  0  1
              4 1  0  1  0

              이런식으로 인접한(Adjacency)이라는 뜻이 있기 때문에 간접적인 것은 무시한다 ex(2-3)
              이런식으로 직접 연결되어있는 인접한 노드가 있으면 1로 아니면 0 으로 표현하는 것을 말한다.

              만약 방향이 있다면
              1 -> 2 일 때

              1  2
            1 0  1
            2 0  0

            이런식으로 열 기준으로 화살표를 보내면 1 아니면 0으로 표현한다.

          

Adjacency List-> 해당 노드와 인접한 노드들을 그냥 쭉 나열하는 것이다.

위의 그래프와 동일하다고 가정하면
1 - 2 - 3 - 4
2 - 1
3 - 1 - 4
4 - 1 - 3

이런식으로 순서상관없이 그냥 쭉 나열하는 방법을 말한다.

여기에서 이 리스트안에 있는 노드들의 개수는 엣지의 개수를 n 이라고 하면 2n개만큼 존재한다.
당연한 말이다. 예를 들어 1 과 2가 연결되어있다면, 
리스트에서 1의 리스트에서는 2가
2의 리스트에서는 1이 이렇게 각각 2번 적기 때문이다.
