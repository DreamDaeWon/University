Git, GitHub
깃은 VCS (Version Control System) 형상관리시스템의 한 종류 이다.

이 기능이 없었을 때는 각각 버전마다 파일들 생성해서 따로 관리해 주어야 했다.



그 다음에 나온것이 CVC(Centralized Verson Control) 이다.

이것은 모든 사람들이 서버에 접속해서 거기서 작업하는 것이다.

단점은 서버에 문제가 생기면 일을 하지 못하고, 인터넷이 통하지 않는 곳에서는 작업을 할 수 없다는 것이다.



그 단점을 보완한 것이 바로 DVC(Distributed Version Control)이다.

이것은 서버에만 자료가 있는 것이 아닌 모든 사람들이 같은 파일을 내려받아 사용하는 것이다.

이렇게 된다면 오프라인 때도 본인의 컴퓨터에 파일이 있기 때문에 작업을 할 수 있다.


깃 하고 깃허브는 커피와 커피숍같은 개념으로 둘이 같은 것이 아니라고 한다.


깃은 우리의 파일을 항상 보고있다고 한다. 누가 언제 무엇을 등등 자세하게 보고 있다고 한다.

즉 깃은 우리 파일의 변경사항을 볼 수 있는 것이다.

그리고 그것을 기록하고 다른사람들과 공유하는 장소가 바로 깃허브인것이다.

바뀐것을 기록하면 하나의 파일에 각기 다른 버전을 저장할 수 있어서 유용하다.



즉 깃은 변경사항 그것을 기록하고 다른 사람들과 공유하는 것은 깃허브 이렇게 이해하면 된다.



깃허브는 형상관리 시스템의 한 종류로 개발자들이 프로그램과 관련된 파일들을 저장하는데 사용한다.
언제든지 저장 시점으로 돌아갈 수 있다.

커밋 commit
커밋은 세이브 하는 것을 말한다.
커밋을 하려면 저장을 원하는 파일들을 묶어서 커밋을 하면 된다.


스테이지에 올리기 add
우리 눈에는 안보이지만 우리 컴퓨터에 commit를 할 목록들을 두는 스테이지가 있다고 한다.
그 스테이지에 우리가 커밋하기를 원하는 파일을 올리는 행동을 add라고 한다.


github에 업로드 push
커밋은 세이브 데이터가 내 컴퓨터에 저장된다.
내 컴퓨터에만 저장이 된다면 내 컴퓨터에 문제가 생겼을 시에는 데이터가 날아갈 수도 있다.
이것을 방지하기 위해서 github라는 원격 저장소에 업로드를 해놓아야 한다.
원격저장소에 업로드 하는 것을 push 라고 한다.

깃허브에 가입할 때는 본인의 이메일 인증을 한 뒤에 이용 가능하다.

소스트리에서 클론을 하면 내 문서에 저장이 된다.

그 뒤에 폴더에서 작업을 하게 되면 커밋을 할 수 있는데 내가 지정한 파일만 올리고 내리는 것이
가능하다.

소스트리를 이용하여 push를 할 때는 비밀번호를 입력해야 한다.


git init를 이용하여 깃 파일을 만들어 줄 수 있다.

git status를 입력하여 현재 깃 파일의 상태를 볼 수 있다.

git add -A 를 입력하면 모든 파일들을 에드 할 수 있다.

git commit -m 을 입력하면 뒤에 원하는 문구를 기록하여 커밋할 수 있다.

git log를 치면 기록들을 볼 수 있다.

git reset 를 입력하면 원하는 커밋까지 초기화 할 수 있다.

git revert 를 입력하면 미래에 한 발을 걸치고 넣을 수있다.

git branch를 입력하면 새로운 브랜치를 만들 수 있다.

:wq를 입력하면 저장하고 나가기가 된다.

git merge 변화를 가져올 브랜치의 이름
이렇게 입력하면 다른 브랜치에서 작업한 상태까지 모두 적용되었다.

그러나 머지할 때는 같은 부분을 작업하면 충돌이 일어나기 때문에 다르게 작업해 주는 것이 좋다.

git rebase 는 머지와 다르게 분기들을 한줄로 깔끔하게 해준다.

git branch -D 브랜치 명
이렇게 입력하면 브랜치를 삭제할 수 있다.
















