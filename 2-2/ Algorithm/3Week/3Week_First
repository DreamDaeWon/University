내부 정렬 (Internal sort)

내부정렬은 internal sort라고 불리며 내부라는 뜻 답게 
입력의 크기가 메인 메모리(주기억장치)의 크기보다 크지 않은 경우에 수행되는
정렬을 말한다.
우리가 아는 보통의 정렬들인
버블, 선택, 삽입, 합병, 퀵, 힙, 쉘, 기수, 이중 피봇 퀵정렬, Tim Sort등등 이 있다.

외부 정렬 (External sort)

외부 정렬은 내부정렬과는 반대로 입력의 크기가 주기억 장치의 공간보다 큰 경우에
보조 지억 장치에 있는 입력을 여러번에 나누어 주기억 장치에 읽어들인 후,
정렬하여 보조 기억 장치에 다시 저장하는 과정을 반복하는 방식으로 정렬한다.

다방향 합병, 다단계 합병 이 있다.


퀵 정렬만 평균 시간복잡도로 표현하고,
나머지는 보통 최악의 시간복잡도로 표현한다.


Stable 키워드
stable 라는 뜻은 번역하면 복원력이 있는 으로 해석된다.

즉 stable한 정렬들은 입력받은 데이터의 값을 정렬하려고 비교했을 때
비교한 데이터의 값이 같다면 그 자료들은 최종 정렬 결과물에서도 본연의
순서를 유지한채 최종적으로 정렬되는 것을 말한다.


버블정렬 bubble sort
두 수를 비교하여 더 큰 수가 뒤로 가도록 스왑해준다.
한번 배열을 쭉 돌면 제일 큰 수가 가장 마지막에 있게 된다.
이것을 반복하는 것
시간복잡도 O(n^2)

구현할 때는 매번 모든 배열을 다 도는 것이 아니라 한 번 다 돌았으면
0부터 n-배열을 순회한 횟수  까지 돌게 구현한다.
이미 정렬된 원소는 볼 필요 없기 때문



선택정렬 Selection sort

선택정렬은 선택한다는 말 답게 입력 배열 전체에서 최솟값을 선택 하여 배열의 0번째 원소와
스왑한다. 그 다음에는 0번 원소를 제외한 나머지 원소 중에서 최소값을 선택하는 식으로
모든 배열의 원소가 정렬될 때까지 반복한다.

시간복잡도는 O(n^2)이다.
버블정렬하고 시간복잡도가 같다고 해서 같은 속도인 것은 아니다.
차수가 같아도 계수가 다르면 속도가 달라진다.

선택정렬의 특징
거의 정렬되어있는 자료든지, 역순인지, 랜덤인지에 관계없이
항상 일정한 시간복잡도를 가진다.

이런 특성을 입력에 민감하지 않은 알고리즘이라고 한다.(input insensitive)

원소 간의 자리바꿈 횟수가 최소인 정렬이다. (비교는 하지만 바꾸는 것은 한번만 하기 때문)


삽입정렬 (Insertion Sort)

배열의 정렬된 부분(앞부분)과 정렬이 안 된 부분(뒷 부분) 으로 나누고
정렬이 안 된 부분(뒷 부분)의 가장 왼쪽 원소를 정렬이 완료된 부분(앞 부분)의
적절한 위치에 삽입하여 정렬되도록 하는 과정을 반복한다.


맨 처음에는 맨 앞의 원소 하나는 무조건 정렬이 되어져 있다고 판단한다.
하나밖에 없기 때문에 그래서 이 정렬은 두번째 원소부터 정렬한다.


원래는 주인공 원소를 한칸씩 앞에있는 원소랑 비교하면서 바꿔야 된다면 스왑하고
바꾸지 않아야 한다면 그 자리에 두고 그 앞의 원소와 앞앞 원소를 비교하는 이런 방식을
반복해야 하는데
최적화 하는 방법이 있다.

1. 주인공 원소를 앞의 원소와 비교하고 스왑하면서 주인공 원소의 위치가 맞게된 순간
더 이상 비교를 하지 않고 다음으로 넘어가는 방식

2. 주인공 원소를 복사해두고 앞의 원소를 비교하면서 하나씩 뒤로 당기고 주인공 원소가
들어가야 할 위치에 넣어주기
이렇게 해주게 되면 1번에 비해서도 빨라진다. 
왜냐면 스왑이 아닌 그저 뒷 칸을 덮어쓰는 방식이기 때문이다.

삽입정렬은 입력이 이미 정렬되어 있으면 가장 빠른 알고리즘 이다.

그리고 보통읜 n^2알고리즘이 입력의 크기가 작으면 빠르기 때문에

파이썬의 sort 함수에도 크기가 64 이하면 합병정렬에서 삽입 정렬로 정렬방식이 바뀌는 방식인
Tim sort를 사용한다.







