Dynamic Programming

다이나믹 프로그래밍은 문제 종류가 많고, 
컴퓨터적인 사고를 물어보기에는 적합하다는 점에서 자주 출제 대회에서 많이 쓰인다.

다이나믹 프로그래밍은 하나의 문제를 단 한 번만 풀도록 하는 알고리즘이다.
한 번 푼 것을 여러 번 다시 푸는 것은 비효율적이기 때문에
한 번 풀고나서 그 값을 저장해서 다시 그 문제를 요구할 때는 이미 구한 값을 제시해주는 방식으로 한다.

일반적으로 상당수의 분할정복 기법은 동일한 문제를 다시 푼다는 단점이 있다.

(그러나 퀵 정렬이나 병합정렬 같이 정렬과같은 몇몇 요소인 경우에는 동일한 문제를 다시 푸는 경우가 없다.)

대표적인 분할정복 중에서 피보나치 수열이 그 예이다.

피보나치 수열은 예를 들어 피보나치 수열에서 15번째 값을 구하고 싶을 때 14번째 값과 13번째 값을 구해서 합쳐서 구한다.


퀵 정렬같은 경우에는 1~7의 값을 1~3과 1~4로 나누어 정렬을 수행한 뒤에 
합치기 때문에 다시 똑같은 문제를 풀지 않는다.

그러나 피보나치 수열같은 경우에는 15번째 값을 구하고 싶을 때
14번째 값과 13번째 값을 알아와서 합쳐야 한다.
여기에서 14번째 값을 구하기 위해서는 13번째 값과 12번째 값이 필요하고,
13번째 값을 구하기 위해서는 12번째 값과 1번째 값을 구해야 한다.

이런식으로 하나를 구하기 위해서 문제가 계속해서 늘어가게 된다.
이 때 n번째 값을 구하기 위해서는 O(2^n)만큼의 계산과정을 거쳐야 한다.

하지만 하나하나 구할 때마다 해당 결과를 저장해두면 다음번에 
그 값을 사용해야 할 때 새로운 계산이 아닌 해당 결과의 값을
가져오면 되기 때문에 문제의 과정을 줄일 수 있다.

그래서 피보나치 수열을 다이나믹 프로그래밍 방식으로 구현할 때
피보나치 수열을 계산하는 함수와 그 값을 저장하는 배열로 구현한다.
배열의 해당 위치에 값이 있으면 그 값을 쓰고 없다면 해당 값을 구하기 위한
루프를 돌게된다.

이렇게 된다면 시간복잡도가 O(n)으로 줄어들게 된다.

이렇게 구현하는 방식이 다이나믹 프로그래밍이다.

이런식으로 다이나믹 프로그래밍을 하기 위해서는 2가지 조건이 필요하다.

1. 큰 문제를 작은 문제로 나눌 수 있는경우 (작은 문제의 구조가 큰 문제의 구조와 같은 경우)
2. 작은 문제에서 구한 정답이 그것을 포함하는 큰 문제에서 사용되는 경우

이렇게 2 가지 조건을 만족해야 한다. 

작은 문제와 큰 문제를 구하는 과정에서 예외 과정을 처리해주어야 하는데 이러한 예외가
적어야 다이나믹 프로그래밍을 하기 좋다.
