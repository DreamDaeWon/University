네트워크 기초 2주차
현실에 있는것과 연관지어 생각하자.

== 병렬전송과 직렬전송 ==

병렬전송은 Parallel 평행이라는 말대로 
한 번에 여러 비트의 데이터 (ex 1Byte) 를 보내는 것을 말한다.

직렬전송은 Serial 연속된 이라는 말대로
한 번에 한 개의 비트만 보내는 것을 말한다.

예전에는 병렬전송이 더 빨랐지만 USB(Universal Serial Bus)의 등장으로 직렬전송이 더 빨라졌다.

병렬도 개발하면 빠르겠지만 병렬전송 케이블은 두껍다. 그래서 현재 추구하는 얇은 디바이스 방향과는 맞지 않아서
사용하지 않는다. 현재는 직렬방식을 사용한다.


== 동기와 비동기 전송 ==
동기 전송 방식은 우리가 전화하는 것과 같다.
우리가 전화를 걸면 상대방의 번호를 누르고 상대방이 받을때까지의 준비과정을 거친다
그 이후에 상대방이 받으면 실시간으로 싱크가 맞게 통화를 주고받는다.
이처럼 동기화 전송 방식은 앞선 비트들이 있고 그 뒤에 내용이 있다. 그리고 마지막에는 싱크 비트들이 배치되어있다.
준비과정인 앞선 싱크 비트들과 마지막에 있는 싱크 비트들 사이에 데이터가 블록 단위로 쭉 전송되는 방식이다.(연속적임)
데이터 블록의 크기도 크다.
실시간을 위해 앞 뒤에 싱크(동기)를 맞추는 싱크비트만 있으면 되는 것이다.
별도의 시작비트와 종료비트가 필요하지 않다.

비동기 방식은 카카오톡을 떠올리면 쉽다.
카카오톡을 보낼 때 상대방이 무조건 실시간으로 카톡을 주고받는것이 아니기 때문에 
비동기 방식은 시작비트와 종료 비트를 알려줘야 한다.
예를들어 내가 ㅋㅋㅋㅋㅋ 을 보내면
[ (시작Start비트)ㅋㅋㅋㅋㅋ(종료Stop비트) ] 이렇게 묶여서 보내지게 된다.
비동기식 전송 방식은 데이터를 작은단위(문자 또는 바이트)로 개별전송하는 방식이다.

동기방식이 비동기 방식에 비해 빠르고 데이터도 잘 보낸다.
하지만 비용문제 때문에 모든 곳에 동기방식을 사용하지는 않는다.


== Simplex, Half-Duplex, Full-Duplex ==

Simplex는 한 방향으로만 데이터를 보내는 것을 말한다. ex) 프린터

Half-Duplex는 한국어로 반 이중이고 말 그대로 수신을 할 때는 송신을 송신을 할 때는 수신을 할 수 없다. ex)무전기

Full-Duplex는 한국어로 전 이중이고 우리가 휴대전화로 통화를 할 때 처럼 실시간 양방향 소통이 가능한 것을 말한다. ex)일반통화


Simplex - 한쪽에서 반대편으로만 		ex) 프린터

Half-Duplex -  한 타임에 한 방향으로만 	ex)무전기

Full-Duplex - 실시간 양방향 			ex)일반통화


== 데이터 통신 표준 ==

표준은 수용된 모델이나 패턴을 말한다.
표준은 데이터 통신과 네트워크에서 광범위하게 사용된다.
표준은 대부분의 디바이스에게 기본적인 호환성과 상호 운용성을 제공한다.
대표적인 예로 벨 전화기와 모스부호가 있다.

그냥 요약하면 기본적인 모델 패턴같이 틀을 짜고
사람들이 그 틀을 사용하면서 대부분의 디바이스에 호환되도록 운영되며,
벨 전화기나 모스부호처럼 사용된다.

암튼 만들어진 모델들은 결국 공급업체가 호환성과 상호운용성을 갖춘 제품을 개발할 수 있도록
프레임워크를 제공하기 위해 만들어진다.


많은 표준 기구가 데이터 통신 표준을 개발하고 공개한다.
그러나 이게 무조건적으로 좋은 것은 아니다. 결국 많은 기업과 사용자들이 사용을 해야 좋은거다.


== 공식표준과 업계표준 ==

공식표준은 국제 표준 기관 같은 곳에서 제정한 표준을 의미한다.

업계표준은 경쟁사가 없어 대체불가능한 표준을 말한다.
공식 표준으로 등록은 안되어있지만 다들 어쩔 수 없이 좋아서 쓰는 표준을 말한다.

대표적으로 TCP/IP가 있다.


== 다양한 표준 기구들 ==

ANSI - 미국 국립 표준원으로 아스키코드를 만든 곳이다.
IEEE(아이트리플E) - 전기전자공학쪽 표준을 개발하는 곳이다.

ITU - 통신회사 연구소들의 모임이다.
ISO - 국제 표준 업체이다.



== OSI 모델 ==
1970년대 말에 만들어졌다.

공식 표준이다.
7개의 계층 구조로 이루어져 있다.

계층구조로 만드는 이유는 각 계층마다 본인 계층만 혹은 위 아래닿아있는 계층까지만 신경써서 개발하면 되기 때문에
개발 속도가 빨라진다.

OSI에는 7개의 계층이 있다.

가장 말단인 물리 계층부터 사용자와 가장 가까운 어플리케이션 계층까지 총 7가지이다.


- 물리계층 L1(여기서 L은 Layer을 말한다.)
물리계층은 장치 간 비트의 실질적인 물리 연결 및 전송을 담당해준다.
디지털 혹은 아날로그와 같은 신호 방법을 정의하고,
전송 방식도 담당한다.(빛신호, 전기 신호)
비동기, 동기 / 단방향, 반이중, 전이중 과 같은 전송 특성또한 지정한다.
10Mbps, 100Mbps와 같은 데이터 속도 또한 정의한다.


- 데이터 링크 계층 L2
물리적 계층을 위한 데이터를 준비하고 윗 계층인 네트워크 계층에 서비스를 제공한다.
데이터 비트를 프레임으로 구성한다. (데이터<->비트 변환해준다.)
노드 주소를 정의한다.
데이터 비트가 전송 매체에 엑세스 하는 방법을 정의한다.
오류를 감지하고 수정하는 프로토콜이 포함되어 있다.
MAC (Media Access Control) 주소를 기반으로 통신한다.


- 네트워크 계층 L3
논리적 주소인 IP를 지정한다. (IP는 고정 IP에서는 안바뀌고, 유동 IP에서는 바뀔 수 있다.)
목적지까지 찾아가는 최적의 경로를 찾는다.
패킷을 생성한다.

우편물로 따지면 집 주소를 처리하는 계층이다.


- 전송계층 L4
메시지를 작은 청크로 분할한다.
애플리케이션을 식별해야 하기 때문에 포트 넘버가 중요하다.
즉 종단 간 통신을 관리한다.

우편물로 따지면 받을사람에 대한 처리를 하는 계층이다.

여기서 종단 간(end-to-end)이라는 말은 데이터가 출발자(송신자)에서 목적지(수신자)까지 직접 전달되는 과정을 말한다.


- 세션계층 L5
두 장치간의 통신을 설정, 유지, 동기화 및 종료를 하는 역할을 담당한다.
즉 파일을 보내다 끊겼을 때 이어보내기 작업을 해준다.


- 프리젠테이션 계층 L6
ASCII, EBCDIC 또는 Unicode 인코딩과 같은 데이터 변환 서비스를 제공한다.
데이터 전송 서비스에서 종단 간(End-to-End) 암호화 서비스를 제공할 수 있다.

데이터의 형식 변환을 담당한다.(암호화, 압축, 인코딩)


- 어플리케이션 계층 L7
파일, 인쇄, 이메일, 웹 브라우저 등의 사용자 애플리케이션을 지원한다.
이 계층에는 원격 엑세스 서비스가 존재한다.
사용자와 직접 상호작용하는 계층이다.
HTTP,FTP,SMTP등의 프로토콜을 사용한다.


게임에 적합한 프로토콜을 만드는 것이 내가 해야 할 일이다.
전 계층을 거쳐 부가정보가 붙은 데이터를 패킷이라고 한다.
이런 전 과정을 encapsulation(캡슐화)이라고 한다.

이런 데이터 캡슐화 방식은 계층화된 아키텍처의 각 계층에 대한 데이터 비트 세트에
헤더라고 알려진 추가 프로토콜 정보 세트를 추가하는 방식이다.
즉 한 단계를 거칠 때마다 계속 정보가 추가되는 것이다.

L1->L7 (수신)
패킷된 정보를 해당되는 계층의 부분의 데이터 확인 후 삭제하고 안쪽 내용물은
윗 계층으로 올라가며 패킷을 푸는 방식


L7 -> L1 (송신)
데이터 비트 세트에 추가 프로토콜 정보 세트를 추가하면서 패킷으로 감싸면서
최종적으로 데이터를 여러 겹으로 감싸 보내는 방식


각 계층마다 하는 일이 명확하기 때문에 개발이 빨라졌고,
각 계층의 규칙에 따라 기능하는 프로토콜이 다르기 때문에 각 계층마다
각각의 규칙에 맞게 처리하면서 통신 장치 간의 데이터 교환을 용이하게 만들었다.


== TCP/IP 모델 ==
TCP/IP 모델은 1970년 초에 생겼다. (OSI 보다 먼저 생김)
TCP/IP 모델은 4개 또는 5개의 계층 구조로 나뉘지만 우리는 4개의 계층구조로 배울것임.
TCP/IP 모델은 공식 표준은 아니지만 업계에서 널리 사용되는 업계 표준이다.(인터넷을 사용하기 위해 필요하기 때문)
4개의 계층으로 나뉜다.

4 프로세스/어플리케이션 계층 : OSI 모델에서 5,6,7에 해당하는 계층이다.
3 호스트 투 호스트 계층 : OSI 모델에서 4에 해당하는 계층이다.
2 인터넷 계층 : OSI 모델에서 3에 해당하는 계층이다.
1 네트워크 엑세스 계층 : OSI 모델에서 2,1에 해당하는 계층이다.



 == LAN(Local Area Networks) ==

LAN은 네트워크 규모 중에서 가장 작은 단위를  뜻한다. ex) 캠퍼스, 한 건물 내
LAN 보다 규모가 큰 네트워크를 MAN(Mertopolitan)(대도시) 이라고 부른다.

MAN은 여러개의 LAN으로 구성된다. ex) 서울, 부산 등의 대도시

MAN이 여러개면 WAN 이라고 말하고 여기서 W는 Wide이다. WAN은 여려개의 MAN으로 구성된다.
ex) 우리나라가 일본 중국 미국과 통신하기 위해 통합 네트워크를 구축하고 미국에 있는 친구와 함께 게임 할 수 있는것은 WAN 덕분이다.
(나라 단위)

LAN을 구축할 때에는 어떤 목적과 목표를 가지고 설계할지에 대해 구체적으로 정해야 한다. (용도에 맞게 설계하고 구축해야 함.)

예를들어 학교 수강신청 사이트의 LAN을 구성할 경우에는 한번에 많은 사용자가 몰릴 것을 대비해 많은 트래픽 상황에 서버가 다운되는 것을
방지하도록 설계해야 할 것이다. 
또는 기업내의 원격 프린터를 위한 LAN을 구축할 시에는 기업내부의 기밀 문건을 복사할 시
해당 내용에 qr코드를 집어넣어 추후에 해당 자료가 파쇄해야하는 기간내에 올바르게 파쇄가 되었는지에 대한 정보를 잘 인식하고 저장하도록 
설계해야 한다.

목적을 제공하는 서버가 있다. 서버는 항상 UP&Running 상태에 있어야 한다.
UP : 파워(전원이 들어와있어야 한다.)
Running : 운영체제(네트워크 기능을 지원하는)

우리가 하용하는 폰, 노트북 등이 클라이언트가 된다.

허브, 브릿지, 스위치, 라우터 등을 사용하여 통신거리가 멀 때 증폭시킨다.

디렉토리 서비스는 fetch(읽어들이는 속도)가 빠르다. 데이터베이스보다 가벼운 개념이다.


이제부터 다양한 방식의 네트워크 소통 방식들을 알아보자.


== 메인 프레임과 터미널 네트워크 소통방식 ==

모든 연산은 메인프레임이 다하고 우리의 개인 컴퓨터들은 터미널이 된다.
여기서 터미널은 사용자의 입력 데이터를 받아 전달하고 계산이 끝난 데이터를 받아 출력만 하기 때문에
더미 터미널 이라고도 불린다. (딱히 똑똑한 일을 안하기 때문)

터미널과 메인 프레임 사이에 데이터를 모아주는 역할을 하는 장치가 있다.

암튼 중요한 것은 메인프레임이 연산 다 하고 터미널은 멍청하게 그냥 데이터만 입력받고 넘기고 처리가 끝난 데이터를 받아 출력만하는 구조란 것이다.


-터미널 <-> 데이터 모으는 놈 <-> 메인프레임(계산 다 함)


== Peer To Peer 방식 ==
Peer To Peer 방식은 (피투피) 어느 컴퓨터든지 서버가 될 수 있다, 즉 어떤 컴퓨터건 간에 서비스를 제공하고, 받을 수 있다.
본인 컴퓨터에 있는 자료를 다른 컴퓨터에 전송할 수 있기 때문이다.
예전에 토렌트를 생각하면쉽다. 또는 스팀의 로컬 네트워크 전송기능을 생각하면 된다.


== Client Dominant 방식 ==
클라이언트 도미넌트 방식은 Dominant의 뜻이 지배적이라는 말처럼,
클라이언트에서 모든 연산처리를 다하고 서버는 클라이언트가 연산을 끝낸 최종 결과 데이터를 저장하기 위한 용도 정도로만 쓰이는 구조를 말한다.
예전에는 통신속도가 너무 느렸기 때문에 이런 방식이 생겼다고 한다.

그러나 현재 이 방식을 아예 사용 안하는 것은 아니다.


== Cient/Sever 방식 ==
클라이언트 서버 방식은 클라이언트와 서버 모두 연산을 하는 것이다.
서버는 기존에 하던것처럼 데이터접근과 저장을 제공한다.
서버에서 필요한 데이터만 복사하여 클라이언트에서 조작을 수행한다.
클라이언트 도미넌트와 비슷하지만 둘 다 데이터를 처리한다는 점에서 다르다.


== Distributed Processing 방식 ==
워크스테이션용 컴퓨터를 여러 대 두고
웹 서버용, 파일 서버용, 어플리케이션 서버용을 나누고 사용하는 방식이다.
만약 한곳에 일이 몰리면? -> 현재 일이 조금 널널하게 있는 서버용 컴퓨터를 끌어다 사용한다.
이렇게하면 대응이 빠르다는 이점이 있어 현재 많이 사용하는 방식이다.


위의 5가지 방식 중에서 현재 아예 사용하지 않는다고 말할 수 있는 방식은 없다.
각기의 장단점이 다르기 때문이다.

현재 개인컴퓨터의 성능이 많이 올라갔다고 하더라도, 메인프레임-터미널 방식이 사용되는 경우도 흔하다.
그 예로는 AI 처리 시스템 방식이 있다. AI회사에서 엄청난 교육을 시키고 그 결과를 행렬로 보관하고 있다.
우리는 해당 AI 서비스를 하는 네트워크에 접속하여 우리의 입력 데이터를 보내고 메인프레임은 그 데이터를 연산 및 처리하여 결과값을 보낸다.
결국 우리 컴퓨터는 데이터를 보내고 다시 받아 출력하는 역할만 하는 것이다.

그래서 절대적으로 무조건 사용하거나, 사용하지 않는 방식은 없다.

















